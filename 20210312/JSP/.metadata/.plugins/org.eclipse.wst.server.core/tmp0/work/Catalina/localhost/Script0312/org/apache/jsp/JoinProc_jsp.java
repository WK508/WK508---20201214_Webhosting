/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.43
 * Generated at: 2021-03-12 06:25:52 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class JoinProc_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<title>회원가입 처리 JSP</title>\r\n");
      out.write("    <style>\r\n");
      out.write("        #wrap{\r\n");
      out.write("            margin-left:auto; \r\n");
      out.write("            margin-right:auto;\r\n");
      out.write("            text-align:center;\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        table{\r\n");
      out.write("            margin-left:auto; \r\n");
      out.write("            margin-right:auto;\r\n");
      out.write("            border:3px solid skyblue\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        td{\r\n");
      out.write("            border:1px solid skyblue\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        #title{\r\n");
      out.write("            background-color:skyblue\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <!-- JoinForm.jsp에서 입력한 정보를 넘겨 받아 처리한다. -->\r\n");
      out.write("    ");
 
        // 한글 깨짐을 방지하기 위한 인코딩 처리
        request.setCharacterEncoding("UTF-8"); 
    
        // getParameter()를 이용해 넘겨진 파라미터 값을 얻어올 수 있다.
        // 파라미터 값을 얻을때 name= 에 지정해둔 값과 동일한 값을 인자로 지정해야 된다.
        String id = request.getParameter("id");
        String password = request.getParameter("password");
        String name = request.getParameter("name");
        
        // 성별의 경우 파라미터 이름이 둘다 gender로 동일하므로 배열로 받아야 된다.
        String[] gender = request.getParameterValues("gender");
        String birthyy = request.getParameter("birth_yy");
        
        // 생일의 경우 <select>로 되어 있는데 파라미터 값을 받을 시 배열형태로 넘겨 받는다.
        String[] birthmm = request.getParameterValues("birth_mm");
        String birthdd = request.getParameter("birth_dd");
        String email1 = request.getParameter("email_1");
        
        // 이메일의 경우 <select>로 되어 있는데 파라미터 값을 받을 시 배열형태로 넘겨 받는다.
        String[] email2 = request.getParameterValues("email_2");
        String phone = request.getParameter("phone");
        String address = request.getParameter("address");
    
      out.write("\r\n");
      out.write("    \r\n");
      out.write("    <div id=\"wrap\">\r\n");
      out.write("        <br><br>\r\n");
      out.write("        <b><font size=\"5\" color=\"gray\">회원가입 정보를 확인하세요.</font></b>\r\n");
      out.write("        <br><br>\r\n");
      out.write("        <font color=\"blue\">");
      out.print(name );
      out.write("</font>님 가입을 축하드립니다.\r\n");
      out.write("        <br><br>\r\n");
      out.write("        \r\n");
      out.write("        <table>\r\n");
      out.write("            <tr>\r\n");
      out.write("                <td id=\"title\">아이디</td>\r\n");
      out.write("                <td>");
      out.print(id );
      out.write("</td>\r\n");
      out.write("            </tr>\r\n");
      out.write("                        \r\n");
      out.write("            <tr>\r\n");
      out.write("                <td id=\"title\">비밀번호</td>\r\n");
      out.write("                <td>");
      out.print(password );
      out.write("</td>\r\n");
      out.write("            </tr>\r\n");
      out.write("                    \r\n");
      out.write("            <tr>\r\n");
      out.write("                <td id=\"title\">이름</td>\r\n");
      out.write("                <td>");
      out.print(name );
      out.write("</td>\r\n");
      out.write("            </tr>\r\n");
      out.write("                    \r\n");
      out.write("            <tr>\r\n");
      out.write("                <td id=\"title\">성별</td>\r\n");
      out.write("                <td>\r\n");
      out.write("                ");

                    // 배열로 넘겨받은 값을 처리하기 위해 for문 이용
                    for(String g : gender){
                        out.println(g);
                    }
                
      out.write("\r\n");
      out.write("                </td>\r\n");
      out.write("            </tr>\r\n");
      out.write("                    \r\n");
      out.write("            <tr>\r\n");
      out.write("                <td id=\"title\">생일</td>\r\n");
      out.write("                <td>\r\n");
      out.write("                ");
      out.print(birthyy );
      out.write("년 \r\n");
      out.write("                ");

                    // 배열로 넘겨받은 값을 처리하기 위해 for문 이용
                    for(String mm : birthmm){
                        out.println(mm);
                    }        
                
      out.write('월');
      out.write(' ');
      out.print(birthdd );
      out.write("일\r\n");
      out.write("                </td>\r\n");
      out.write("            </tr>\r\n");
      out.write("                    \r\n");
      out.write("            <tr>\r\n");
      out.write("                <td id=\"title\">이메일</td>\r\n");
      out.write("                <td>\r\n");
      out.write("                    ");
      out.print(email1 );
      out.write("\r\n");
      out.write("                    ");

                    // 배열로 넘겨받은 값을 처리하기 위해 for문 이용
                    for(String e : email2){
                        out.println("@"+e);
                    }        
                    
      out.write("\r\n");
      out.write("                </td>\r\n");
      out.write("            </tr>\r\n");
      out.write("                    \r\n");
      out.write("            <tr>\r\n");
      out.write("                <td id=\"title\">휴대전화</td>\r\n");
      out.write("                <td>");
      out.print(phone );
      out.write("</td>\r\n");
      out.write("            </tr>\r\n");
      out.write("            <tr>\r\n");
      out.write("                <td id=\"title\">주소</td>\r\n");
      out.write("                <td>\r\n");
      out.write("                    ");
      out.print(address );
      out.write("\r\n");
      out.write("                </td>\r\n");
      out.write("            </tr>\r\n");
      out.write("        </table>\r\n");
      out.write("        \r\n");
      out.write("        <br>\r\n");
      out.write("        <input type=\"button\" value=\"확인\">\r\n");
      out.write("    </div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
